import socket
import random
from threading import Thread
import sqlite3
import hashlib
import uuid
import sys
from time import sleep
import time


def login(client):
    connection = sqlite3.connect("DataBasik.db")
    cursor = connection.cursor()
    while 1:
        nickname = client.recv(buff).decode("utf8")
        password = client.recv(buff).decode("utf8")
        zapros = ("""SELECT Nickname, Password FROM Login WHERE  
                                Nickname = '{}' AND Password = '{}'""").format(nickname, password)
        cursor.execute(zapros)
        results = cursor.fetchall()
        try:
            if nickname == results[0][0]:
                client.send(bytes("1", "utf8"))
                connection.close()
                return nickname
        except IndexError:
            client.send(bytes("0", "utf8"))


def process_conn():
    while 1:
        client, client_address = SERVER.accept()
        name = login(client)
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω ", name, " —Å –∞–¥—Ä–µ—Å–æ–º %s:%s " % client_address)
        addresses[client] = client_address
        test1[name] = client_address
        test2[name] = ADDR
        Thread(target=processing_client, args=(client, name)).start()


def processing_client(client, name):
    clients[client] = name
    sendall(bytes("%s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è" % name, "utf8"))
    rassilka(client)

    while 1:
        msg = client.recv(buff)

        hour = time.strftime("%H")
        minute = time.strftime("%M")
        second = time.strftime("%S")
        timesend = hour + ":" + minute + ":" + second

        print("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ " + timesend + " –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + name + ": " + msg.decode('utf8'))

        if msg == bytes("/exit", "utf8"):
            print("–û—Ç–∫–ª—é—á–∏–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º: %s" % name)
            client.send(bytes("%s –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç" % name, "utf8"))
            sleep(0.5)
            client.close()
            sleep(0.5)
            del clients[client]
            break

        elif msg == bytes("/register", "utf8"):
            if name != "Admin":
                client.send(bytes("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", "utf8"))
            else:
                connection = sqlite3.connect("DataBasik.db")
                cursor = connection.cursor()
                client.send(bytes("–õ–æ–≥–∏–Ω", "utf8"))
                nickname = client.recv(buff).decode("utf8")
                client.send(bytes("–ü–∞—Ä–æ–ª—å", "utf8"))
                password = client.recv(buff).decode("utf8")
                h = hashlib.md5(password.encode())
                ht = h.hexdigest()
                zapros = ("""INSERT INTO Login(Nickname, Password) VALUES('{}','{}')""").format(nickname, ht)
                cursor.execute(zapros)
                connection.commit()
                connection.close()
                client.send(bytes("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "utf8"))

        elif msg == bytes("/66", "utf8"):
            if name != "Admin":
                client.send(bytes("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!"), "utf8")
            else:
                connection = sqlite3.connect("DataBasik.db")
                cursor = connection.cursor()
                client.send(bytes("\"–ö–æ–º–º–∞–Ω–¥–µ—Ä –ö–æ–¥–∏... –í–æ—Ç –≤—Ä–µ–º—è –∏ –Ω–∞—Å—Ç–∞–ª–æ. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–∫–∞–∑ 66\"", "utf8"))
                zapros = ("""DELETE FROM Login WHERE key > 1 """)
                cursor.execute(zapros)
                connection.commit()
                connection.close()
                client.send(bytes("–ü—Ä–∏–∫–∞–∑ 66 –∏—Å–ø–æ–ª–Ω–µ–Ω", "utf8"))
                sleep(0.5)
                client.send(bytes(" ", "utf8"))

        elif msg == bytes("/help", "utf8"):
            client.send(bytes("–ü–æ–º–æ—â—å –ø—Ä–∏—à–ª–∞!", "utf8"))
            client.send(bytes("–ê —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏—à–ª–∞, –Ω–æ –∏ –ø–æ–º–æ–≥–ª–∞ - –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É —Å–µ—Ä–≤–µ—Ä–∞ :)", "utf8"))
            sleep(0.5)
            client.send(bytes(" ", "utf8"))

        elif msg == bytes("/adr", "utf8"):

            client.send(bytes("–ß–µ–∫–∞–π –∫–æ–Ω—Å–æ–ª—å", "utf8"))

            print(test1)

        elif msg == bytes("/clients", "utf8"):
            client.send(bytes("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: ", "utf8"))
            strings = []
            for key, value in clients.items():
                strings.append("{}".format(value))
            result = "; ".join(strings)
            client.send(bytes(result, "utf8"))
            sleep(0.5)
            client.send(bytes(" ", "utf8"))
            # –ú–æ–¥—É–ª—å –≤–µ—Å–µ–ª—å—è
        elif msg == bytes("/cat", "utf8"):
            client.send(bytes("\t\t‰∫∫____‰∫∫", "utf8"))
            client.send(bytes("‚âß(‚óï ‚Äø‚Äø ‚óï)‚â¶", "utf8"))
            sleep(0.5)
            client.send(bytes(" ", "utf8"))

        elif msg == bytes("/emoji", "utf8"):
            client.send(bytes("–í–∞–º –≤—ã–±–µ—Ä–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —ç–º–æ–¥–∂–∏ :)", "utf8"))
            emoji = ["( Õ°¬∞ Õú ñ Õ°¬∞)", "(*^œâ^)", "(^‰∫∫^)", "(‚úØ‚ó°‚úØ)", "(‚óï‚Äø‚óï)", "Ôºº(‚âß‚ñΩ‚â¶)Ôºè", "(Ôºç‚Ä∏·Éö)", "(>œâ^)", "(‚Ä¢‡∏¥_‚Ä¢‡∏¥)?",
                     "(Ôºè„ÄÇÔºº)", "(ÔºÉÔºûÔºú)", "„ÉΩ(‚ô°‚Äø‚ô°)„Éé", "(Ôæâ¬¥–∑ÔΩÄ)„Éé", "(ÔºûÔΩçÔºú)", "(‚ó£_‚ó¢)", " ‚ïÆ(Ôø£_Ôø£)‚ï≠",
                     "‚îê( Àò ÔΩ§ Àò )‚îå", "(‚óé ‚óé)", "(O.O)", "Œ£(Ôæü„É≠Ôæü)", "(Ôºæ‚Ä¢ œâ ‚Ä¢Ôºæ)", "Ô∏ª„Éá‚ïê‰∏Ä", "(‚ïÆ¬∞-¬∞)‚ïÆ‚î≥‚îÅ‚îÅ‚î≥", "(‚ïØ¬∞Áõä¬∞)‚ïØÂΩ°‚îª‚îÅ‚îª",
                     "‚î¨‚îÄ‚î¨„Éé( ¬∫ _ ¬∫„Éé)", "( Àò‚ñΩÀò)„Å£‚ô®", "(*Ôø£iiÔø£)", "Ÿ©(Àä„ÄáÀã*)Ÿà", "(Ôø£^Ôø£)„Çû", "‚úû", "‚ù§", "üëΩ"]

            randomEmo = random.choice(emoji)
            client.send(bytes(f"{randomEmo}", "utf8"))
            sleep(0.5)
            client.send(bytes(" ", "utf8"))

        else:
            sendall(msg, timesend + " " + name + ": ")
            MsgConnection = sqlite3.connect("DataBasik.db")
            cursor = MsgConnection.cursor()
            savemsg = ("""INSERT INTO MessageDataBase(Name, Timesend , Message) VALUES('{}','{}','{}')""").format(name,
                                                                                                                  timesend,
                                                                                                                  msg.decode(
                                                                                                                      'utf8'))
            cursor.execute(savemsg)
            MsgConnection.commit()
            MsgConnection.close()


def rassilka(client):
    sleep(1)
    client.send(bytes("-------------------------------", "utf8"))
    sleep(1)
    client.send(bytes("\n–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Å–∞–º–æ–º –ª–∞–º–ø–æ–≤–æ–º —á–∞—Ç–µ!", "utf8"))
    sleep(1)
    client.send(bytes("(*„Éªœâ„Éª)Ôæâ", "utf8"))
    sleep(1)
    client.send(bytes("–¢—É—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ –¥—Ä—É–≥–∞, –ø–æ–¥—Ä—É–≥—É, –∂–µ–Ω—É, —Ç–µ—â—É –∏–ª–∏ –∫–∏—Ä—é—Ö—É", "utf8"))
    sleep(1)
    client.send(bytes("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –≤ —á–∞—Ç–µ: ", "utf8"))
    sleep(0.5)
    client.send(bytes("/help - –Ω–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å", "utf8"))
    sleep(0.5)
    client.send(bytes("/w - –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "utf8"))
    sleep(0.5)
    client.send(bytes("/clients - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "utf8"))
    sleep(0.5)
    client.send(bytes("/emoji - —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è", "utf8"))
    sleep(0.5)
    client.send(bytes("/cat - –∫–æ—à–µ—á–∫–∞ –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "utf8"))
    sleep(0.5)
    client.send(bytes("–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!", "utf8"))
    sleep(0.5)
    client.send(bytes("-------------------------------", "utf8"))
    sleep(0.4)


def sendall(msg, prefix=""):
    for client in clients:
        client.send(bytes(prefix, "utf8") + msg)


def check():
    if uuid.getnode() != 168202120781163:
        print("*–ë–∏–±-–ë–∏–±* –°–µ—Ä–≤–µ—Ä –Ω–µ —Ö–æ—á–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è! *–ë–∏–±-–±–∞–º...*")
        sys.exit(0)
    else:
        print("–°–µ—Ä–≤–µ—Ä –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å")


check()

clients = {}
addresses = {}
test1 = {}
test2 = {}

HOST = socket.gethostbyname(socket.gethostname())
print("–•–æ—Å—Ç: " + HOST)
PORT = 9090
print("–ü–æ—Ä—Ç: " + str(PORT))
buff = 4096
ADDR = (HOST, PORT)

SERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
SERVER.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
SERVER.bind(ADDR)

SERVER.listen(10)
print("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

ACCEPT_THREAD = Thread(target=process_conn)
ACCEPT_THREAD.start()
ACCEPT_THREAD.join()

SERVER.close()
